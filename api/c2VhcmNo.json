[{"title":"健康核酸码生成","date":"2023-01-03T21:28:00.000Z","date_formatted":{"ll":"Jan 4, 2023","L":"01/04/2023","MM-DD":"01-04"},"updated":"2023-01-03T21:34:28.881Z","content":"健康核酸码生成\n之前没事干看健康码前端发现的，现在疫情放开遂发出来\n流程\n很久之前了，就不发找密钥的步骤了大致就是找前端文件，找到前端加密的库以及密钥然后我们同样使用该库加密，然后抓接口，进行提交即可生成，其中核酸码较为复杂需要将加密提交后返回的参数转为二维码即可。\n可以干什么？\n可以做成健康码核酸码聚合app给老年人使用，也可以使用python编写一个小程序调用接口查询指定Excel表格内的人员的核酸情况进行展示。\n预览\n登录页\n\n主页\n\n加密解密部分代码\n\n源码\n没有写完，大致框架已有，可编译成app端使用点击访问源码。\n注\n该博文写于2023年1月4日，代码内接口以及加密于2022年9月左右抓取，代码内接口以及加密方法可能失效，该项目仅用于学习使用。\n","thumbnail":"2023/health/cover.png","plink":"https://tgwl.github.io/2023/health/"},{"title":"百词斩打卡图片生成","date":"2023-01-03T20:30:00.000Z","date_formatted":{"ll":"Jan 4, 2023","L":"01/04/2023","MM-DD":"01-04"},"updated":"2023-01-03T20:30:38.713Z","content":"百词斩打卡截图生成\n因同学需要所以做了该网页（不过并没有派上用场）\n开发流程\n\n保存几张打卡图片 先用ps将数字扣掉\n拆百词斩app的包将字体文件取出\n使用ps定位像素位置\n随便一个表单进行前端验证\n使用php的gd库开发后端\n\n代码核心图片\n\n预览\n点击预览。\n","thumbnail":"2023/baici/cover.png","plink":"https://tgwl.github.io/2023/baici/"},{"title":"Thinkphp项目配置","date":"2022-03-14T08:33:00.000Z","date_formatted":{"ll":"Mar 14, 2022","L":"03/14/2022","MM-DD":"03-14"},"updated":"2022-03-14T08:42:54.000Z","content":"\nWhat’s the biggest problem with configuration files.\n——Zexin\n\n\n工具准备\n1.IDE 编辑器 VScode\n2.数据库管理工具 Navicat（win)\n3.本地运行环境工具 UPUPWANK 配置\n4.thinkphp5.1部署\n5.api调试管理工具 postman\n\nvscode和postman 很简单我们不再详细写了\n\n本地运行环境工具 UPUPWANK 配置\n本地运行环境工具 UPUPWANK (win64) 下载链接,直接下一步下一步。\n打开软件后看操作\n\n比如我项目名称就叫test，主要域名叫test.com，PHP版本选择PHP7.2\n\n然后浏览器打开test.com访问不了，这是因为我们少了一步配置，功能扩展下面的host重定向\n\n填入域名，先点击加号然后提交。\n\n然后我们刷新一下就显示出页面了。\n\n现在让我们看一下项目的路径在那里吧.点击那个画笔然后看操作就会跳转到我们的项目路径\n\n\n接下来让我们连接一下数据库，看图片操作，数据库管理下的参数配置，这里我选自己定义的INNODB然后点击右上方的小锁\n\n这里我让用户名和密码一样了，你们可以自己设置\n\n接下来点击功能扩展下的phpMyAdmin管理，就会跳转到浏览器，输入设置的账号和密码就可以了。\n\n\n数据库管理工具 Navicat 相关配置\n下载链接 提取码：5z7c 里面有破解教程很简单这里我们就不再赘述。\n我们让他来连接我们的服务器表，端口号和账号密码必须是我们之前设置的\n\n双击就连接上了，接下来我们就可以右键添加表了，我这里不演示了。\n\nthinkphp5.1部署\n在官方文档里面我们选择composer安装\n\n然后直接下一步下一步，期间有一个选择PHP环境的，让我们选择目录，有的同学可能没有单独装，就好比我。不过没有关系UPUPWANK以及帮我们装好了多个PHP版本，我们找到UPUPWANK的安装目录，这里我修改过了，你们找到你们的目录即可\n\n选择Php.exe,我这里选择的是PHP7.2版本，你们可以自己选自己想要的版本，然后下一步下一步就行了。\n\n接下来我们修改镜像，win+r，输入cmd，输入composer如果下面有输出信息就表示你已经安装成功了。\n\n接下来修改镜像，还是官方文档下的这个命令输入命令行就可以了。\n1composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ \n\n新建thinkPHp项目并用Vscode编辑\n前面配置完成之后就可以到这一步了，文件管理里面打开我们的项目路径，右键git bash here，git也是一个很好用的软件大家百度下载直接下一步下一步就可以了，我们不再赘述。\n\n如果是第一次安装，输入下面的命令，复制完成怎么粘贴上面呢，我们按住键盘上的insert插入的意思，就可以粘贴上面了。\n1composer create-project topthink/think=5.1.* tp5\n\n因为我不是第一次安装所以会给我报这个\n\n完成之后，我们先查看一下然后\n123cd tp5// 这是单独的两个命令ls\n\n就可以看到我们的文件，接下来使用命令，命令一定要在tp5文件夹下执行\n1composer update topthink/framework \n当然这在官方文档里面也有\n\n接下来我们把ErrorFiles u.php删除只让他剩下tp5\n\n进入tp5，将里面的文件剪切到与tp5同级目录下，然后将tp5空文件夹删除\n\n然后打开UPUPWANK修改项目的路径\n\n一定要选到public*路径下\n\n接下来可以正常访问了，但是在此之前我们要设置一下伪静态，好让我们隐藏入口文件，官方文档下也有说明。\n我们还是在设置里面，下的伪静态设置，因为我们这里用的是Apache服务器所以填\n12345678&lt;IfModule mod_rewrite.c&gt;  Options +FollowSymlinks -Multiviews  RewriteEngine On  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f  RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L]&lt;/IfModule&gt;\n\n接下来打开我们域名test.coom就可以正常访问了\n\n打开vscode，右键打开文件夹找到项目路径然后就可以编辑我们的项目了\n\n当然我们最好修改一下一下基础配置，这是我之前的项目不用跟着我改\n\n基本配置\n基础配置 config/app.php\n123456789return [    // 应用名称    &#x27;app_name&#x27;               =&gt; &#x27;项目名&#x27;,    // 应用地址    &#x27;app_host&#x27;               =&gt; &#x27;http://test.com&#x27;,    // 应用调试模式    &#x27;app_debug&#x27;              =&gt; true,\t...]   \n数据库配置 config/database.php\n12345678910111213141516171819return [    // 数据库类型    &#x27;type&#x27;            =&gt; &#x27;mysql&#x27;,    // 服务器地址    &#x27;hostname&#x27;        =&gt; &#x27;127.0.0.1&#x27;,    // 数据库名    &#x27;database&#x27;        =&gt; &#x27;你定义的&#x27;,    // 用户名    &#x27;username&#x27;        =&gt; &#x27;root&#x27;,    // 密码    &#x27;password&#x27;        =&gt; &#x27;root&#x27;,    // 端口    &#x27;hostport&#x27;        =&gt; &#x27;3306&#x27;,    ...    // 数据集返回类型    // 此处为什么我填collction，因为默认的是array，我们使用collection更好获取书    &#x27;resultset_type&#x27;  =&gt; &#x27;collection&#x27;,    ...]","thumbnail":"2022/thinkphpcfg/main.png","plink":"https://tgwl.github.io/2022/thinkphpcfg/"},{"title":"JavaScript函数自调用与闭包","date":"2021-10-25T12:19:00.000Z","date_formatted":{"ll":"Oct 25, 2021","L":"10/25/2021","MM-DD":"10-25"},"updated":"2022-03-14T08:42:54.000Z","content":"简单的说，javascript允许使用内部函数—即函数定义和函数表达式位于另一个函数的函数体内。而且，这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。\n\n闭包\n要理解闭包，我们要了解栈堆内存和作用域链。\n栈堆内存\n12var a= 2;var c=&#123;&quot;ani&quot;:&quot;老虎&quot;&#125;\n1.上面的两行代码做的事就是在栈内存中定义了一个变量a和一个变量c。\n2.变量a指向的值为2，变量c指向的值为一个地址，这个地址又指向堆内存空间的{“ani”:“老虎”}。\n3.因为在javascript中基本数据类型是存储在栈内存中的，引用数据类型是存储在堆内存中的。看表\n\n\n栈内存\n栈内存\n\n\n\n\n变量\n值\n\n\na\n2\n\n\nc\n引用地址\n\n\n作用域链\n12345678910var a = 1;function fc()&#123;    var b = 2;    function fc1()&#123;        console.log(b);//2        console.log(a);//1    &#125;    fc1();&#125;fc(); \n在这个代码中我们先看\nfc1在栈内的执行\n\n\n变量\n值\n\n\n\n\n无\n无\n\n\nfc的执行\n\n\n变量\n值\n\n\n\n\nb\n2\n\n\nfc1\n引用地址\n\n\n全局执行\n\n\n变量\n值\n\n\n\n\na\n1\n\n\nfc\n引用地址\n\n\n1.var a=1；这个时候我们是在全局执行环境的，浏览器的全局环境就是window作用域，我们的window作用域中有a和fc；\n2.当我们往下走到fc的时候，栈内存会开辟一块新的执行环境，此时fc的执行环境中我们有b和fc1；\n3.当我们接着往下走到fc1的时候，这时栈内存同样会开辟一块新的执行环境，此时fc1的执行环境中是没有任何变量数据的，但是我们在fc1中输出a、b，我们都是可以读取到的；这是因为程序在读取变量的时候是从内到外的开始读的，是随着fc1开始往上一层一层的查找，是这样的执行顺序(fc1 = &gt; fc = &gt; window)，如果找到window中还没有读取到变量，这时程序才会报错；\n当然在执行的过程中，垃圾回收机制如果检测到程序执行完了是会进行垃圾回收的，避免造成内存泄露等问题；就是说我们的fc1里面执行完之后fc1的作用域就会被销毁，接着程序执行fc，fc执行完之后fc就会被销毁；往上执行到全局的时候，整个程序就没有了fc的作用域和fc1的作用域，只剩下浏览器的全局作用域window，这个时候window里只剩a和fc；\n闭包\n12345678910function outer() &#123;     var  a = &#x27;123&#x27;        return function add()&#123;　　　　//在这里因为作用域的关系，add是能访问到outer的所有变量的，但是outer是访问不到add的变量；　　　　//所以思路一转，把add的值作为结果return出来变通实现outer外部函数访问到了内部函数变量    // add就是一个闭包函数，因为他能够访问到outer函数的作用域，add中没有找到变量a，则会继续往上层作用域找        console.log(a);    &#125;&#125;var  inner = outer()   // 获得add闭包函数inner()   //&quot;123&quot;\n首先我们可以看到，在全局作用域下我们是有一个outer函数的，outer作用域里面有a和add，add作用域里面执行控制台输出a的变量，此时这里的add函数就形成了一个闭包，因为add函数里面需要访问到outer作用域下的a变量，而他们不处在同一个作用域中，所以两者相互牵引，需要输出a，上面outer中的变量a就必须得在，作用域链查找到outer的时候找到a了，输出a的时候，垃圾回收机制会认为add还没有执行完成，因为此时的作用域链查找已经到了outer作用域下，所以不会清理a的内存空间；所以这就会带来一个问题：如果我们多次的使用闭包，则会给我们的程序带来内存占用过多，导致性能问题；\n函数内部能访问全局变量是javascript语言的特殊之处，但是如果我们想达到函数外部能访问内部变量的时候，我们就可以使用闭包，这就是闭包给我们带来的便利；\n闭包的优缺点：\n优点：\n1.可以读取函数内部的变量\n2.可以避免全局污染\n缺点：\n1.闭包会导致变量不会被垃圾回收机制所清除，会大量消耗内存；\n2.不恰当的使用闭包可能会造成内存泄漏的问题；\n总结\n1.作用域链查找变量的方式是一层一层的往上查找，直到找到为止，如果找到window全局作用域还未找到，就报undefined；\n2.嵌套函数中，因为不在同一作用域，正常情况下内外部函数是访问不到内部函数的，但是通过闭包可以实现；\n3.尽可能少的使用闭包，因为会造成内存消耗大以及有可能造成内存泄露（如果不需要的时候，不要随便使用）；\n自调用匿名函数\n形式1:\n12345(function(形参列表)&#123;　　　　return .....　　&#125;)(实参列表);\n形式2:\n12345(function(形参列表)&#123;　　　　return .....　　&#125;(实参列表));\n函数表达式调用法:\n12345var exc=function()&#123;    console.log(&quot;hello world&quot;);&#125;exc();\n逐层调用\n12345678910111213141516171819202122function fun1()&#123;    var a=0;    console.log(a);    return function()&#123;        a++;        console.log(a);    &#125;&#125;//注意这种调用的结果:fun1();fun1()();fun1()();输出0//01//01//解释:每一次先执行fun1(),a都会初始化为0,再执行匿名函数,a++得到1\n先赋值给一个变量再由变量调用:\n1234567891011121314151617181920212223function fun1()&#123;    var a=0;    console.log(a);    return function()&#123;        a++;        console.log(a);    &#125;&#125;//注意这种调用的结果:var res=fun1();res();res();res();输出0//1//2//3//解释:fun1()只执行一次,所以a=0只执行一次,以后每次执行res()是在执行匿名函数,每执行一次,a自增一次\n","plink":"https://tgwl.github.io/2021/2/"},{"title":"使用termux+netlify+github+cloudflare搭建hexo+备份及恢复","date":"2021-10-25T06:42:00.000Z","date_formatted":{"ll":"Oct 25, 2021","L":"10/25/2021","MM-DD":"10-25"},"updated":"2023-01-03T19:05:14.589Z","content":"准备步骤\n\n域名\ngithub账号\nnetlify账号\n一台已经root的手机or电脑\ncloudflare账号\n一个不是特别笨的脑袋\ntermux终端\n\nfreenom域名\n域名推荐使用freenom的账号，注册教程网上已经有了很多了，这里就不再赘述了。\n这里说一下我遇到的坑，有的人在注册的时候会碰到选了域名提示不可以的情况，这时候在可用里面搜索zexin.ga，我的是这个域名你可以替换成你自己的。\n加到购物车以后有的会发现提交订单后并在My Domains里并没有看到域名，这时候要修改个人信息和查看自己的ip地址与城市街道然后在资料里面修改再提交订单就完成了。\n可以参考这一个来进行注册\ngithub账号\n自行注册后在github新建一个项目，一定要是公开的。项目名称为 ==你的用户名.github.io== 比如我的GitHub用户名为tgwl那么我就要生成一个tgwl.github.io的新项目\nnetlify账号\n这里打开官网并进行注册登录，推荐绑定github账号。\ncloudfare账号\n这里打开官网并进行注册登录\n开始\n先将hexo博客部署在github上，这里我们不使用繁琐的命令，我们使用一个脚本。\n部署hexo博客\n为了后续安装快捷。建议替换为清华源，复制以下指令执行：\n1234567sed -i &#x27;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.listsed -i &#x27;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; $PREFIX/etc/apt/sources.list.d/game.listsed -i &#x27;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; $PREFIX/etc/apt/sources.list.d/science.listpkg update\n换源成功后，在 Termux 上安装 openssh,git 和 nodejs。此处推荐安装 nodejs 长期支持版本，避免不必要的 bug\n123pkg install opensshpkg install gitpkg install nodejs-lts\n这里要逐行复制然后在终端里面输入安装\n更换 npm 源为阿里镜像\n1npm config set registry http://registry.npm.taobao.org\n以使用 mixplore 或 mt管理器等任何能够访问到 system 分区的文件管理器，直接搜到 /data/data/com.termux/files/home/, 然后在 home 目录下新建一个简易脚本重命名为menu.sh此处分享一个网上发现的脚本，保留了地址想要看的话可以去看看\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236#!/bin/sh#本脚本用于群友交流，完全开源，可以随意传阅，不过希望保留出处。echo &quot;===========================================&quot;echo &quot;       欢迎使用萌新版Hexo控制脚本！&quot;echo &quot;            双击打开即可使用&quot;echo &quot;        更多内容可以访问我的博客&quot;echo &quot;          https://akilar.top&quot;echo &quot;===========================================&quot;HexoPath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd)cd $&#123;HexoPath&#125;printf &quot;\\033[32m Blog 根目录：&quot;$&#123;HexoPath&#125;&quot;\\033[0m&quot;echo &quot; &quot;echo &quot;[0] 退出菜单&quot;echo &quot;=============以下功能需要在空文件夹内使用================&quot;echo &quot;[1] 初始化安装Hexo（仅在第一次安装时使用）&quot;echo &quot;[2] 从云端恢复Hexo（需要在脚本中配置仓库URL）&quot;echo &quot;=============以下功能需要在Hexo文件夹内使用================&quot;echo &quot;[3] 开启本地预览&quot;echo &quot;[4] 重新编译后开启本地预览（修改过_config.yml需使用这个才能看到变化）&quot;echo &quot;[5] 部署页面到博客网站&quot;echo &quot;[6] 从Github拉取最新版本（需要在脚本中配置仓库URL）&quot;echo &quot;[7] 提交本地修改到GitHub&quot;echo &quot;[8] 升级Hexo及插件（慎用）&quot;echo &quot;[9] 安装butterfly主题&quot;echo &quot;[10] 安装volantis主题&quot;echo &quot;[11] 安装Hexo-Admin(用于管理或撰写Hexo博文，适合初学者使用)&quot;echo &quot;=============以下功能为全局指令================&quot;echo &quot;[12] 安装ssh密钥&quot;echo &quot;[13] 验证ssh密钥&quot;echo &quot; &quot;printf &quot;请选择需要的功能，默认选择[3] 开启本地预览&quot;echo &quot; &quot;printf &quot;选择：&quot;read answerif [ &quot;$answer&quot; = &quot;1&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在为您创建Hexo文件夹 ...\\n&quot;mkdir Hexocd Hexoprintf &quot;\\033[32mINFO \\033[0m 正在将npm源替换为阿里云镜像 ...\\n&quot;npm config set registry https://registry.npm.taobao.org # 替换NPM源为阿里镜像printf &quot;\\033[32mINFO \\033[0m 正在为您全局安装Hexo命令集...\\n&quot;npm install -g hexo-cliprintf &quot;\\033[32mINFO \\033[0m 即将为您开始Hexo初始化安装...\\n&quot;hexo initprintf &quot;\\033[32mINFO \\033[0m 正在为您安装必要依赖...\\n&quot;npm install --savenpm install hexo-deployer-git --saveprintf &quot;\\033[32mINFO \\033[0m 请查看您当前的Hexo版本...\\n&quot;hexo versionprintf &quot;\\033[32mINFO \\033[0m 安装完成，您可以开始您的Hexo之旅了！\\n&quot;printf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sprintf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sprintf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sexit 0elseif [ &quot;$answer&quot; = &quot;2&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在从Github拉取博客源码 ...\\n&quot;git clone https://github.com/tgwl/tgwl.github.git Hexo # 记得替换仓库URL为自己的源码存放仓库cd Hexoprintf &quot;\\033[32mINFO \\033[0m 正在将npm源替换为阿里云镜像 ...\\n&quot;npm config set registry https://registry.npm.taobao.org # 替换NPM源为阿里镜像printf &quot;\\033[32mINFO \\033[0m Hexo恢复中...\\n&quot;npm install -g hexo-cli# npm install gulp-cli -g #全局安装gulp，未配置不用开启npm install --saveprintf &quot;\\033[32mINFO \\033[0m 恢复完成，您可以开始您的Hexo之旅了！\\n&quot;printf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sprintf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sprintf &quot;\\033[32mINFO \\033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\\n&quot;sleep 5sexit 0elseif [ &quot;$answer&quot; = &quot;3&quot; ] || [ &quot;$answer&quot; = &quot;&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在启动本地预览，可以按Ctrl+C退出\\n&quot;hexo sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;4&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在清理本地缓存...\\n&quot;hexo clean# printf &quot;\\033[32mINFO \\033[0m 正在更新番剧列表...\\n&quot;# hexo bangumi -u #bilibili追番插件，未配置无需开启printf &quot;\\033[32mINFO \\033[0m 正在重新编译静态页面...\\n&quot;hexo generate# printf &quot;\\033[32mINFO \\033[0m 正在压缩静态资源...\\n&quot;# gulp #gulp插件，未配置无需开启printf &quot;\\033[32mINFO \\033[0m 正在开启本地预览，可以按Ctrl+C退出\\n&quot;hexo serverexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;5&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在清理本地缓存...\\n&quot;hexo clean# printf &quot;\\033[32mINFO \\033[0m 正在更新番剧列表...\\n&quot;# hexo bangumi -u #bilibili追番插件，未配置无需开启printf &quot;\\033[32mINFO \\033[0m 正在重新编译静态页面...\\n&quot;hexo generate# printf &quot;\\033[32mINFO \\033[0m 正在压缩静态资源...\\n&quot;# gulp #gulp插件，未配置无需开启printf &quot;\\033[32mINFO \\033[0m 正在准备将最新修改部署至Hexo...\\n&quot;hexo deployprintf &quot;\\033[32mINFO \\033[0m 部署完成，您的网站已经是最新版本！\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;6&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在从Github拉取最新版本...\\n&quot;git pull origin master #2020年10月后github新建仓库默认分支改为main，注意更改printf &quot;\\033[32mINFO \\033[0m 拉取完毕，您的博客已是最新版本！\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;7&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在提交最新修改到GitHub...\\n&quot;git add .git commit -m &quot;Update posts content&quot;git push origin master #2020年10月后github新建仓库默认分支改为main，注意更改printf &quot;\\033[32mINFO \\033[0m 提交完毕，您的修改已上传至Github！\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;8&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 请先确认当前版本 ...\\n&quot;hexo versionsleep 3sprintf &quot;\\033[32mINFO \\033[0m 即将为您全局升级hexo-cli...\\n&quot;npm install hexo-cli -gprintf &quot;\\033[32mINFO \\033[0m hexo-cli升级完成，请查看当前版本。\\n&quot;hexo versionsleep 3sprintf &quot;\\033[32mINFO \\033[0m 即将为您升级npm-check...\\n&quot;npm install -g npm-checkprintf &quot;\\033[32mINFO \\033[0m npm-check升级完成！\\n&quot;printf &quot;\\033[32mINFO \\033[0m 正在使用npm-check检查系统是否有可升级插件...\\n&quot;npm-checksleep 3sprintf &quot;\\033[32mINFO \\033[0m 即将为您升级npm-upgrade...\\n&quot;npm install -g npm-upgradeprintf &quot;\\033[32mINFO \\033[0m 正在使用npm-upgrade升级插件...\\n&quot;printf &quot;\\033[32mINFO \\033[0m 您可以在接下来的过程中主动选择是否升级插件\\n&quot;npm-upgradesleep 1sprintf &quot;\\033[32mINFO \\033[0m 正在为您保存升级结果...\\n&quot;npm update -gnpm update --saveprintf &quot;\\033[32mINFO \\033[0m 恭喜您，您的Hexo已经是最新版本\\n&quot;sleep 2sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;9&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在为您下载最新稳定版butterfly主题 ...\\n&quot;git clone -b master https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterflyprintf &quot;\\033[32mINFO \\033[0m 正在为您安装必要依赖！\\n&quot;npm install hexo-renderer-pug hexo-renderer-stylus --saveprintf &quot;\\033[32mINFO \\033[0m 安装完成，感谢您对butterfly的支持！\\n&quot;sleep 1sprintf &quot;\\033[32mINFO \\033[0m 请在/Hexo/_config.yml中将theme修改为butterfly以激活主题！\\n&quot;sleep 3sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;10&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在为您下载最新稳定版volantis主题 ...\\n&quot;git clone https://github.com/volantis-x/hexo-theme-volantis themes/volantisprintf &quot;\\033[32mINFO \\033[0m 正在安装本地搜索必要依赖！\\n&quot;npm install hexo-generator-search --savenpm install hexo-generator-json-content --saveprintf &quot;\\033[32mINFO \\033[0m 正在安装页面渲染必要依赖！\\n&quot;npm install hexo-renderer-stylus --saveprintf &quot;\\033[32mINFO \\033[0m 安装完成，感谢您对volantis的支持！\\n&quot;sleep 1sprintf &quot;\\033[32mINFO \\033[0m 请在/Hexo/_config.yml中将theme修改为volantis以激活主题！\\n&quot;sleep 3sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;11&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在为您下载Hexo-Admin插件 ...\\n&quot;npm install hexo-admin --saveprintf &quot;\\033[32mINFO \\033[0m 安装完成，即将为您启动本地预览！\\n&quot;printf &quot;\\033[32mINFO \\033[0m 请访问 http://localhost:4000/admin/ 进行博文编辑！\\n&quot;sleep 2shexo serversleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;12&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在重新设置github global config...\\n&quot;git config --global user.name &quot;tgwl&quot; # 记得替换用户名为自己的git config --global user.email &quot;tg2521150881@gmail.com&quot; # 记得替换邮箱为自己的ssh-keygen -t rsa -C tg2521150881@gmail.com # 记得替换邮箱为自己的printf &quot;\\033[32mINFO \\033[0m 即将打开sshkey，复制后可按 Ctrl+D 返回...\\n&quot;sleep 2sless ~/.ssh/id_rsa.pubprintf &quot;\\033[32mINFO \\033[0m 配置完成，请将sshkey添加到Github！\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;13&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 正在验证SSHkey是否配置成功 ...\\n&quot;ssh -T git@github.comprintf &quot;\\033[32mINFO \\033[0m 验证完毕，您的SSHkey已成功绑定至Github！\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shelseif [ &quot;$answer&quot; = &quot;0&quot; ]; thenprintf &quot;\\033[32mINFO \\033[0m 欢迎下次光临！\\n&quot;sleep 1sexit 0elseprintf &quot;\\033[31mERROR \\033[0m 输入错误，请返回重新选择...\\n&quot;sleep 1sexec $&#123;HexoPath&#125;/menu.shfifififififififififififififi\n里面有些用户名和邮箱需要自己修改\n脚本新建完成后，回到 Termux 终端，使用指令运行脚本打开菜单页面，按照菜单指示进行配置 sshkey 和重装 hexo：\n1bash menu.sh\n脚本使用不再赘述，提示如果使用脚本生成shhkey需要在脚本里配置账号和邮箱，如果不配置的话脚本是生成不了的，当然也可以手动配置，这里大概说下流程，使用脚本先输入命令1然后会在home里面生成一个Hexo的文件，再按照脚本提示将menu.sh移动到Hexo里面，我使用的是mt管理器，移动到里面之后再使用termux\n1cd Hexo\n然后在运行脚本\n1bash menu.sh\n生成sshkey后复制完整，当然也可以打开home/.ssh/id_rsa.pub，这里就是生成的文件也可以在这里复制。\n然后打开github打开你的项目，settings-deploy keys-add 右上角deploy key\ntitle可以随便填一个key填你复制的sshkey然后在Allow write access就完成了，详细的可以看下面的一篇文章搭配脚本使用。\n这时候使用mt管理器打开Hexo里面有一个_config.yml我们打开然后这样配置\n1234deploy:    type: git    repo: git@github.com:你的用户名/你的用户名.github.io.git    branch: master\n这里面空格什么的一定不要少\n修改里面内容，mt管理器修改文件后会生成一个同名的备份文件记得删除。\n修改完成后运行脚本，记住一定是在Hexo里面运行，可以先ls查看一下文件如果有一堆文件的话证明是在Hexo里如果ls后看到Hexo说明在hexo外这时候用cd Hexo就可以进入文件使用脚本了。\n可以先本地预览一下再部署到博客，参考脚本命令，如果运行脚本输入5后，等待完成就可以在浏览器打开\n你的用户名.github.io预览了如果成功了进行下一步如果没有成功查看报错然后谷歌。\n你也可以搭配这篇文章使用。\n换主题\n这里我使用inside主题进行演示，先cd Hexo然后使用命令\n1git clone git@github.com:ikeq/hexo-theme-inside.git themes/inside\n等下载完后可以在hexo/theme/里面看到一个inside文件夹这就是我们的主题，打开配置文件_config.yml找到theme将后面修改问inside，注意之间要留空格。然后运行脚本可以先在本地预览然后部署到github。\n我在修改主题时候碰到过修改主题乱码的坑这里写下我自己的解决方案。原因是hexo在5.0之后把swig给删除了需要自己手动安装\n问题解决\n1npm i hexo-renderer-swig\n然后再部署\n将博客部署到netlify\n首先直接使用 GitHub 账号登录 Netlify，点击界面中的New site from Git按钮：\n\n第一步，选择连接 GitHub：\n\n授权，直接按照默认的选项点击Install即可：\n\n第二步，选择博客的仓库，比如我的 tgwl.github.io 仓库：\n第三步，配置选项、构建部署：\n接着等待片刻就部署成功了\n\n点击domain settings可以设置域名\n\n然后修改你想要改的域名就完成了\n\n参考\n将freenom域名解析到cloudlfare上\n登录你的freenom账号，如果没注册域名点这里\n\n这里可以看到你的域名，点击Manage Domain\n\n这时候回到cloudflare登录，右上角可以改到中文然后添加站点填你注册的域名比如我zexin.ga然后选免费，下一步等到看到这个的时候\n\n复制这两个回到freenom在manage domain页面点这个\n\n然后选择我圈的内容，将复制的两条Dns粘贴在里面就完成了\n\n回到cloudflare当你的域名显示这个就表示成功了\n\n在netlify配置你的域名\n打开netify点进去你的项目然后点这里\n\n点击这里可以添加你的域名，因为我已经添加过了就不再进行演示，添加的时候直接下一步。\n\n完成后点击这里\n\n然后可以看到这个页面，看好圈住的A\n\n然后打开cloudflare网站找到你的域名然后点进去再点上面的DNS\n\n然后点击这里添加看图\n\n有的人可能不知道名称为什么填一个 @ ，这里说一下，比如说你的域名为zexin.ga 那么名称填 @ 的话，直接访问zexin.ga就可以打开，你也可以在名称里填一个www那么访问www.zexin.ga就可以打开。\n\n接下来回到netlify，解析下一个域名\n\n记住我圈的内容为 名称 框的内容为 类型  ，使用绿色框住的复制下来，这里我打码了。\n\n然后回到cloudflare，跟上一步一样，类型选CNAME，名称填www，地址填复制的那一段然后就完成了。\n\n然后就可以在这里查到了\n\n这里再提一下我遇到的坑，有的添加域名后点击Check DNS configuration会发现不是上面的页面，而是一些dns1 dns2 dns3 ，原因是你第一次添加后把项目删了或者种种原因才会出现这个页面，因为cloudflare的自定义名称服务器是收费的\n\n所以我们要打开netlify，在域名页面的Options选项会出现第三个选项，我们进去后删除dns再回来就会出现上面的页面，就可以正常去cloudflare解析了。\n\n博客备份github及恢复\n首先打开github新建一个分支，我这里取名叫hexo\n\n在输入框里输入你想要生成的分支名字然后就会提示你新建一个，然后打开设置\n\n然后进入点击后面的符号\n\n看到页面后修改你新添加的分支为然后update\n\n备份\n打开termux执行\n1git clone https://github.com/username/uesrname.github.io.git\nusername为你的用户名修改即可\n执行完成后本地会有一个这样的文件夹\n\n将克隆下来的目录中除了.git文件夹外的所有文件都删掉，如果看不到.git文件夹请打开显示隐藏文件夹\n\n将本地博客文件夹下除了.deploy_git的其他源文件全部复制过来\n如果之前克隆过themes中的主体文件，要将主题文件中的.git目录删除掉，否则无法备份主题文件\n\n然后打开termux进入备份的文件夹，这里推荐改一下名好进，比如说改成back，termux执行cd back然后执行命令\n123git add .git commit -m &quot;此次提交的备注&quot;git push\n输入账号和密码会发现报错，这是因为从2021年8月13日起GitHub不再支持密码验证\n所以我们要打开github 选择“Settings”\n\n选择“Developer settings”\n\n选择“Personal access token”\n\n选择“Generate new token”\n\n输入Note，有效期我设置了无限长，选择范围全选\n\n生成了access token（这个token一定要保存好，因为之后就看不到了）\n\n在password时输入上面生成的token即可\n\ntermux在输入密码的时候可能会看不见，直接复制进去回车就行了。\n恢复\n安装Git并配置好全局变量\n安装node.js，npm以及hexo，这时安装hexo就不需要初始化了\n在任意目录下执行git clone 注意修改username\n1https://github.com/username/username.github.io.git\n进入到克隆好的文件夹执行：\n12npm installnpm install hexo-deployer-git --save\n参考:\n解决备份密码问题\n备份\nhexo插入本地图片不显示问题\n1.修改配置文件\n找到hexo根目录下_config.yml配置文件中post_asset_folder设置为true\n修改后再次创建md文件时会同事生成一个同名的文件夹\n2.安装hexo-asset-image插件\nnpm安装\n1npm install https://github.com/CodeFalling/hexo-asset-image --save\n3.在md中插入图片（相对路径）\n生成的图片放入到md同名文件夹中设置路径\n其他\n这里推荐一下在线写hexo的方案:\nHexo Netlify CMS-暮雨千泷\n一键部署脚本\n【经验】静态博客部署 Hexo + Netlify-CMS + Vercel （在线构建\n为 Hexo 博客集成 Netlify CMS\nHexo + Netlify-CMS + Vercel 在线部署模板（免本地环境，免敲命令），以及 Academia 学术主页模板\n不过本人发现上面这些在线办法如果本地写博客然后部署可能会将在线写的覆盖掉。\n思路:本地先将github上的克隆下来然后重新部署。\n更新问题\n2023年1月4日\n部署时提示index下无markdownit使用命令\n1npm install markdown-it markdown-it-container\n文章图片无法访问\n1npm install hexo-asset-image --save\n并修改node_modules/hexo-asset-image/index.js下代码为\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&#x27;use strict&#x27;;var cheerio = require(&#x27;cheerio&#x27;);// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123;  return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split(&#x27;.&#x27;);hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;  var config = hexo.config;  if(config.post_asset_folder)&#123;    \tvar link = data.permalink;\tif(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)\t   var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;\telse\t   var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;\t// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.\tvar endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;    link = link.substring(beginPos, endPos);    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];    for(var i = 0; i &lt; toprocess.length; i++)&#123;      var key = toprocess[i];       var $ = cheerio.load(data[key], &#123;        ignoreWhitespace: false,        xmlMode: false,        lowerCaseTags: false,        decodeEntities: false      &#125;);      $(&#x27;img&#x27;).each(function()&#123;\t\tif ($(this).attr(&#x27;src&#x27;))&#123;\t\t\t// For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;.\t\t\tvar src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\\\&#x27;, &#x27;/&#x27;);\t\t\tif(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp;\t\t\t   !/^\\s*\\//.test(src)) &#123;\t\t\t  // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.\t\t\t  // In addition, to support multi-level local directory.\t\t\t  var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;\t\t\t\treturn elem != &#x27;&#x27;;\t\t\t  &#125;);\t\t\t  var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;\t\t\t\treturn elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;\t\t\t  &#125;);\t\t\t  if(srcArray.length &gt; 1)\t\t\t\tsrcArray.shift();\t\t\t  src = srcArray.join(&#x27;/&#x27;);\t\t\t  $(this).attr(&#x27;src&#x27;, config.root + link + src);\t\t\t  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);\t\t\t&#125;\t\t&#125;else&#123;\t\t\tconsole.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);\t\t\tconsole.info&amp;&amp;console.info($(this));\t\t&#125;      &#125;);      data[key] = $.html();    &#125;  &#125;&#125;);\n详见解决hexo无法访问图片路径\n","thumbnail":"2021/termux/main.png","plink":"https://tgwl.github.io/2021/termux/"},{"title":"友链","date":"2019-06-23T07:26:17.000Z","date_formatted":{"ll":"Jun 23, 2019","L":"06/23/2019","MM-DD":"06-23"},"updated":"2023-01-04T09:02:35.037Z","content":"\n    \n        \n        \n            nibazshab\n            “不知道这个博客是干什么的”\n        \n    \n\n\n\n.friends{display:flex;flex-wrap:wrap;}.friends .brick{-webkit-transition:all .3s ease;transition:all .3s ease;}.friends .brick{display:flex;margin:10px 10px 0 0;text-decoration:none;font-weight:300;padding:10px;background-color:#fff0;border:solid 1px #659eb929;color:#659eb9;text-align:center;border-radius:4px;overflow:hidden}.friends .brick:hover{background-color:#659eb9;color:#fff;border:solid 1px #659eb9;box-shadow:0 6px 16px 0 rgba(80, 178, 243, 0.35);}.blog-avatar:hover{animation:whirl 0.5s;}\n@keyframes whirl{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}.friends .brick:active{-webkit-transform:scale(0.95);-moz-transform:scale(0.95);-ms-transform:scale(0.95);-o-transform:scale(0.95);transform:scale(0.95);}.friends .brick .blog-avatar{background-color:#fff0;color:#fff;border:solid 1px #dbdbdb;border-radius:50%;width:50px;height:50px;}.friends .brick .container{margin-left:10px;}.friends .brick .container .name{font-size:14px;}.friends .brick .container .motto{font-size:12px;margin-top:5px;-webkit-box-orient:vertical;-webkit-line-clamp:1;}\n@media(max-width:450px){.friends .brick{width:100%;}.friends .brick .container{margin-left:0;width:100%;}.motto{width: 100% !important;}}.motto.long{width:100px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}.mdui-panel-item[open] .mdui-panel-item-arrow{transform:rotate(180deg);}.mdui-panel-item-body {height:auto!important;}\n\n本站模板\n1234名称：Zexin&#x27;s Blog链接：https://zezin.netlify.app/图标：https://zezin.netlify.app/avatar.jpg简介：晒饱太阳，远道而来。\n","plink":"https://tgwl.github.io/links/"},{"title":"关于","date":"2021-10-23T16:00:00.000Z","date_formatted":{"ll":"Oct 24, 2021","L":"10/24/2021","MM-DD":"10-24"},"updated":"2023-01-03T19:19:07.133Z","content":"关于我\n03后 打灰佬一枚\n主攻 移动端开发，面向谷歌/Stack OverFlow/技术文档 有JAVA、Android、Flutter、Dart、PHP、Vue、Uniapp、Css、ThinkPhP、Python基础\n编写过Android、Web项目。\n关于博客\n该博客的目的，为了记录一下平常的日常虽然不怎么发以及学习时的一些文章、心得、程序的一些配置。\n本站域名\n1.tgwl.github.io\n2.zexin.eu.org\n3.zezin.netlify.app\n","plink":"https://tgwl.github.io/about/"}]